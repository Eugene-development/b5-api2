type Company {
    id: ID!
    name: String!
    legal_name: String!
    inn: String!
    ban: Boolean!
    is_active: Boolean!
    region: String
    status_id: ID
    status: CompanyStatus @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    phones: [CompanyPhone!]! @hasMany
    emails: [CompanyEmail!]! @hasMany
}

type CompanyStatus {
    id: ID!
    value: String!
    slug: String!
    description: String
    color: String
    icon: String
    sort_order: Int!
    is_default: Boolean!
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type CompanyPhone {
    id: ID!
    company_id: ID!
    value: String!
    contact_person: String
    is_primary: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type CompanyEmail {
    id: ID!
    company_id: ID!
    value: String!
    contact_person: String
    is_primary: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateCompanyInput {
    name: String! @rules(apply: ["required", "string", "max:255"])
    legal_name: String! @rules(apply: ["required", "string", "max:255"])
    inn: String! @rules(apply: ["required", "string", "max:12", "unique:companies,inn"])
    region: String @rules(apply: ["nullable", "string", "max:255"])
    status_id: ID @rules(apply: ["nullable", "exists:company_statuses,id"])
    ban: Boolean = false
    is_active: Boolean = true
}

input CreateCompanyPhoneInput {
    company_id: ID! @rules(apply: ["required", "exists:companies,id"])
    value: String! @rules(apply: ["required", "string", "max:50"])
    contact_person: String @rules(apply: ["nullable", "string", "max:255"])
    is_primary: Boolean = false
}

input CreateCompanyEmailInput {
    company_id: ID! @rules(apply: ["required", "exists:companies,id"])
    value: String! @rules(apply: ["required", "email", "max:255"])
    contact_person: String @rules(apply: ["nullable", "string", "max:255"])
    is_primary: Boolean = false
}

input UpdateCompanyInput {
    id: ID! @rules(apply: ["required", "exists:companies,id"])
    name: String @rules(apply: ["sometimes", "string", "max:255"])
    legal_name: String @rules(apply: ["sometimes", "string", "max:255"])
    inn: String @rules(apply: ["sometimes", "string", "max:12"])
    region: String @rules(apply: ["nullable", "string", "max:255"])
    ban: Boolean
    is_active: Boolean
    status_id: ID @rules(apply: ["nullable", "exists:company_statuses,id"])
}

extend type Query {
    "Get all companies"
    companies: [Company!]! @paginate

    "Get a single company by ID"
    company(id: ID! @whereKey): Company @find

    "Get companies by region"
    companiesByRegion(region: String! @where): [Company!]! @paginate

    "Get all company statuses"
    companyStatuses: [CompanyStatus!]! @all(model: "App\\Models\\CompanyStatus")

    "Get active company statuses"
    activeCompanyStatuses: [CompanyStatus!]! @all(model: "App\\Models\\CompanyStatus", scopes: ["active"])
}

extend type Mutation {
    "Create a new company"
    createCompany(input: CreateCompanyInput! @spread): Company! @create(model: "App\\Models\\Company")

    "Update an existing company"
    updateCompany(input: UpdateCompanyInput! @spread): Company! @update(model: "App\\Models\\Company")

    "Delete a company"
    deleteCompany(id: ID! @whereKey): Company! @delete(model: "App\\Models\\Company")

    "Create a company phone"
    createCompanyPhone(input: CreateCompanyPhoneInput! @spread): CompanyPhone! @create(model: "App\\Models\\CompanyPhone")

    "Create a company email"
    createCompanyEmail(input: CreateCompanyEmailInput! @spread): CompanyEmail! @create(model: "App\\Models\\CompanyEmail")
}
