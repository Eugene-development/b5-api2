enum UserStatusEnum {
    ACTIVE @enum(value: "active")
    BANNED @enum(value: "banned")
}

type UserStatus {
    id: ID!
    value: String!
    slug: String!
    description: String
    color: String
    icon: String
    sort_order: Int!
    is_default: Boolean!
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type User {
    id: ID!
    name: String
    region: String
    email: String
    status: UserStatusEnum @field(resolver: "App\\GraphQL\\Queries\\UserStatusResolver@resolve") @deprecated(reason: "Use userStatus instead")
    status_id: ID
    userStatus: UserStatus @belongsTo(relation: "status")
    company_id: ID
    company: Company @belongsTo
    created_at: DateTime
    updated_at: DateTime
    email_verified_at: DateTime
}

type DeletedUser {
    id: ID!
    name: String
    email: String
    deleted: Boolean!
}

extend type Query {
    "Get all users"
    users: [User!]! @all

    "Get all user statuses"
    userStatuses: [UserStatus!]! @all(model: "App\\Models\\UserStatus")

    "Get active user statuses"
    activeUserStatuses: [UserStatus!]! @all(model: "App\\Models\\UserStatus", scopes: ["active"])
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    region: String
    company_id: ID
    status_id: ID
}

extend type Mutation {
    "Ban a user"
    banUser(id: ID!): User @field(resolver: "App\\GraphQL\\Mutations\\BanUser")

    "Unban a user"
    unbanUser(id: ID!): User @field(resolver: "App\\GraphQL\\Mutations\\UnbanUser")

    "Delete a user permanently"
    deleteUser(id: ID!): DeletedUser @field(resolver: "App\\GraphQL\\Mutations\\DeleteUser")

    "Update a user"
    updateUser(input: UpdateUserInput! @spread): User! @update(model: "App\\Models\\User")
}

scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
