enum ProjectStatus {
    ACTIVE @enum(value: "active")
    COMPLETED @enum(value: "completed")
    CANCELLED @enum(value: "cancelled")
}

enum AgentRateType {
    PERCENTAGE @enum(value: "percentage")
    FIXED @enum(value: "fixed")
}

type Project {
    id: ID!
    value: String
    user_id: ID
    agent: User @belongsTo(foreignKey: "user_id")
    region: String
    description: String
    is_active: Boolean
    contract_name: String
    contract_date: Date
    contract_amount: Float
    agent_percentage: Float
    planned_completion_date: Date
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateProjectInput {
    value: String!
    user_id: ID
    region: String
    description: String
    is_active: Boolean = true
    contract_name: String
    contract_date: Date
    contract_amount: Float
    agent_percentage: Float
    planned_completion_date: Date
}

input UpdateProjectInput {
    id: ID!
    value: String
    user_id: ID
    region: String
    description: String
    is_active: Boolean
    contract_name: String
    contract_date: Date
    contract_amount: Float
    agent_percentage: Float
    planned_completion_date: Date
}

extend type Query {
    "Get all projects"
    projects: [Project!]! @paginate

    "Get a single project by ID"
    project(id: ID! @whereKey): Project @find

    "Get projects by status"
    projectsByStatus(status: ProjectStatus! @where): [Project!]! @paginate

    "Get projects by agent"
    # projectsByAgent(user_id: ID! @where): [Project!]! @paginate
    projectsByAgent(user_id: ID! @where): [Project!]! @all
}

extend type Mutation {
    "Create a new project"
    createProject(input: CreateProjectInput! @spread): Project! @create

    "Update an existing project"
    updateProject(input: UpdateProjectInput! @spread): Project! @update

    "Delete a project"
    deleteProject(id: ID! @whereKey): Project! @delete
}

scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
